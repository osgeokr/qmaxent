# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMaxentPlugin
                                 A QGIS plugin
 This plugin allows users to build species distribution models (SDMs) directly within QGIS using the MaxEnt (Maximum Entropy) approach. It provides an intuitive interface to load presence data, sample background points, extract environmental variables from raster layers, and run machine learning models to predict suitable habitats. Results are visualized as raster layers and can be evaluated using AUC, ROC, and feature importance plots.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-03-23
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Byeong-Hyeok Yu
        email                : bhyu@knps.or.kr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QFileDialog, QTableWidgetItem, QComboBox
from qgis.core import Qgis, QgsRasterLayer, QgsProject, QgsColorRampShader, QgsRasterShader, QgsSingleBandPseudoColorRenderer
from PyQt5.QtGui import QColor
from osgeo import gdal


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .qmaxent_dialog import QMaxentPluginDialog
import os.path
import geopandas as gpd
from sklearn import metrics

from .extraction import sample_raster, annotate
from .core import stack_geodataframes, MaxentModel, apply_model_to_rasters
from .utils import save_object

class QMaxentPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QMaxentPlugin_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&QMaxent')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QMaxentPlugin', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qmaxent/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'QMaxent'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&QMaxent'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = QMaxentPluginDialog()
            
            # Connect the presence browse button to the file selector function
            self.dlg.btnBrowsePresence.clicked.connect(self.select_presence_file)
            self.dlg.btnBrowseRasters.clicked.connect(self.select_raster_folder)
            self.dlg.btnBrowseTrainingData.clicked.connect(self.select_training_data_path)
            self.dlg.btnBrowseSaveModel.clicked.connect(self.select_save_model_path)
            self.dlg.btnBrowsePredRaster.clicked.connect(self.select_prediction_raster_path)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Get the selected presence file path from the line edit
            presence_path = self.dlg.lineEditPresence.text()

            # Get raster file paths from the table
            rasters = []
            row_count = self.dlg.tableWidgetRasters.rowCount()
            for i in range(row_count):
                item = self.dlg.tableWidgetRasters.item(i, 0)
                if item is not None:
                    file_path = os.path.join(self.raster_folder_path, item.text())
                    rasters.append(file_path)

            # Sample background points from the first raster
            if rasters:
                # Sample background points
                background = sample_raster(rasters[0], count=10000)

                # Load presence points from GeoPackage
                presence = gpd.read_file(presence_path)

                # Merge presence and background points, and label the classes
                merged = stack_geodataframes(presence, background, add_class_label=True)

                # Annotate covariates from raster values
                annotated = annotate(merged, rasters, drop_na=True, quiet=True)

                # Save the annotated training dataset to user-selected path
                save_path = self.dlg.lineEditTrainingData.text()
                if save_path:
                    try:
                        annotated.to_file(save_path, driver="GPKG")
                        self.iface.messageBar().pushMessage(
                            "QMaxent", f"Saved training data to: {save_path}",
                            level=Qgis.Success, duration=5
                        )
                    except Exception as e:
                        self.iface.messageBar().pushMessage(
                            "Error", f"Failed to save: {str(e)}",
                            level=Qgis.Critical, duration=5
                        )
                        
                # Split x/y data
                x = annotated.drop(columns=['class', 'geometry'])
                y = annotated['class']

                # Train the model
                model = MaxentModel(transform='cloglog', beta_multiplier=2.0)
                model.fit(x, y)

                # Evaluate training performance
                ypred = model.predict(x)
                auc = metrics.roc_auc_score(y, ypred)
                self.iface.messageBar().pushMessage(
                    "Maxent Training",
                    f"Training AUC score: {auc:.3f}",
                    level=Qgis.Success,
                    duration=5
                )

                # Save the trained Maxent model to user-selected path
                model_path = self.dlg.lineEditSaveModel.text()
                if model_path:
                    try:
                        save_object(model, model_path)
                        self.iface.messageBar().pushMessage(
                            "QMaxent", f"Saved model object to: {model_path}",
                            level=Qgis.Success, duration=5
                        )
                    except Exception as e:
                        self.iface.messageBar().pushMessage(
                            "Error", f"Failed to save model object: {str(e)}",
                            level=Qgis.Critical, duration=5
                        )

                # Save the predictions to user-selected path
                output_raster = self.dlg.lineEditPredRaster.text()
                if not output_raster:
                    self.iface.messageBar().pushMessage(
                        "Error", "No output raster path specified.",
                        level=Qgis.Critical, duration=5
                    )
                    return

                try:
                    apply_model_to_rasters(model, rasters, output_raster, quiet=True)

                    sdm_color_list = [
                        '#440154',  # Viridis_1 (RGB: 68, 1, 84)
                        '#48186a',  # Viridis_2 (RGB: 72, 40, 120)
                        '#433d84',  # Viridis_3 (RGB: 62, 74, 137)
                        '#38598c',  # Viridis_4 (RGB: 49, 104, 142)
                        '#2d708e',  # Viridis_5 (RGB: 38, 130, 142)
                        '#25858e',  # Viridis_6 (RGB: 31, 158, 137)
                        '#1e9b8a',  # Viridis_7 (RGB: 53, 183, 121)
                        '#6ccd5a',  # Viridis_8 (RGB: 109, 205, 89)
                        '#b8de29',  # Viridis_9 (RGB: 180, 222, 44)
                        '#fde725'   # Viridis_10 (RGB: 253, 231, 37)
                    ]
                    add_layer_with_rendering(output_raster, "Maxent Predictions", sdm_color_list)
                    self.iface.messageBar().pushMessage(
                        "QMaxent", f"Prediction raster saved and loaded: {output_raster}",
                        level=Qgis.Success, duration=5
                    )
                except Exception as e:
                    # Handle errors during model application or file writing
                    self.iface.messageBar().pushMessage(
                        "Error", f"Failed to save prediction raster: {str(e)}",
                        level=Qgis.Critical, duration=5
                    )
                    return

    def select_presence_file(self):
        """Open a file dialog to select a .gpkg file and set its path to the input field."""
        file_path, _ = QFileDialog.getOpenFileName(
            self.dlg,
            "Select Presence File",
            "",
            "GeoPackage Files (*.gpkg);;All Files (*)"
        )
        if file_path:
            self.dlg.lineEditPresence.setText(file_path)
            
    def select_raster_folder(self):
        """Open a folder dialog and populate tableWidgetRasters with .tif files."""
        folder = QFileDialog.getExistingDirectory(
            self.dlg,
            "Select Raster Folder",
            ""
        )
        if not folder:
            return

        self.raster_folder_path = folder
        self.dlg.tableWidgetRasters.setRowCount(0)

        tif_files = [f for f in os.listdir(folder) if f.lower().endswith(".tif")]

        for i, tif_file in enumerate(tif_files):
            file_path = os.path.join(folder, tif_file)

            self.dlg.tableWidgetRasters.insertRow(i)

            item = QTableWidgetItem(tif_file)
            self.dlg.tableWidgetRasters.setItem(i, 0, item)

            combo = QComboBox()
            combo.addItems(["Continuous", "Categorical"])
            self.dlg.tableWidgetRasters.setCellWidget(i, 1, combo)

    def select_training_data_path(self):
        """Open a file dialog to select a path for saving the training data (.gpkg)."""
        file_path, _ = QFileDialog.getSaveFileName(
            self.dlg,
            "Select File to Save SDM Training Data",
            "",
            "GeoPackage Files (*.gpkg);;All Files (*)"
        )
        if file_path:
            if not file_path.endswith(".gpkg"):
                file_path += ".gpkg"
            self.dlg.lineEditTrainingData.setText(file_path)

    def select_save_model_path(self):
        """Open a file dialog to select a path for saving the SDM model object (.qmaxent)."""
        file_path, _ = QFileDialog.getSaveFileName(
            self.dlg,
            "Select File to Save SDM Model Object",
            "",
            "QMaxent Model Files (*.qmaxent);;All Files (*)"
        )
        if file_path:
            if not file_path.endswith(".qmaxent"):
                file_path += ".qmaxent"
            self.dlg.lineEditSaveModel.setText(file_path)

    def select_prediction_raster_path(self):
        """Open a file dialog to select a path for saving the prediction raster (.tif)."""
        file_path, _ = QFileDialog.getSaveFileName(
            self.dlg,
            "Select File to Save Prediction Raster",
            "",
            "GeoTIFF Files (*.tif);;All Files (*)"
        )
        if file_path:
            if not file_path.endswith(".tif"):
                file_path += ".tif"
            self.dlg.lineEditPredRaster.setText(file_path)

def render_raster(layer, band, spectrum):
    prov = layer.dataProvider()
    src_ds = gdal.Open(layer.source())
    src_band = src_ds.GetRasterBand(band)

    if src_band.GetMinimum() is None or src_band.GetMaximum() is None:
        src_band.ComputeStatistics(0)
    band_min = src_band.GetMinimum()
    band_max = src_band.GetMaximum()

    fcn = QgsColorRampShader()
    fcn.setColorRampType(QgsColorRampShader.Interpolated)

    item_list = [
        QgsColorRampShader.ColorRampItem(
            band_min + (n / (len(spectrum) - 1)) * (band_max - band_min),
            QColor(color), lbl=f"{band_min + (n / (len(spectrum) - 1)) * (band_max - band_min):.2f}"
        )
        for n, color in enumerate(spectrum)
    ]

    fcn.setColorRampItemList(item_list)
    shader = QgsRasterShader()
    shader.setRasterShaderFunction(fcn)

    renderer = QgsSingleBandPseudoColorRenderer(prov, band, shader)
    renderer.setClassificationMin(band_min)
    renderer.setClassificationMax(band_max)

    layer.setRenderer(renderer)
    layer.triggerRepaint()

def add_layer_with_rendering(file_path, name, spectrum):
    layer = QgsRasterLayer(file_path, name)
    if layer.isValid():
        QgsProject.instance().addMapLayer(layer)
        render_raster(layer, 1, spectrum)
    else:
        print(f"{name} layer is not valid!")

